// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/AlexandrKudryavtsev/GoMovieSearch/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockMovies is a mock of Movies interface.
type MockMovies struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesMockRecorder
}

// MockMoviesMockRecorder is the mock recorder for MockMovies.
type MockMoviesMockRecorder struct {
	mock *MockMovies
}

// NewMockMovies creates a new mock instance.
func NewMockMovies(ctrl *gomock.Controller) *MockMovies {
	mock := &MockMovies{ctrl: ctrl}
	mock.recorder = &MockMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovies) EXPECT() *MockMoviesMockRecorder {
	return m.recorder
}

// Autocomplete mocks base method.
func (m *MockMovies) Autocomplete(ctx context.Context, query string) ([]entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Autocomplete", ctx, query)
	ret0, _ := ret[0].([]entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Autocomplete indicates an expected call of Autocomplete.
func (mr *MockMoviesMockRecorder) Autocomplete(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Autocomplete", reflect.TypeOf((*MockMovies)(nil).Autocomplete), ctx, query)
}

// Index mocks base method.
func (m *MockMovies) Index(ctx context.Context, data []entity.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockMoviesMockRecorder) Index(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockMovies)(nil).Index), ctx, data)
}

// Search mocks base method.
func (m *MockMovies) Search(ctx context.Context, query string) ([]entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMoviesMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMovies)(nil).Search), ctx, query)
}

// MockMoviesRepo is a mock of MoviesRepo interface.
type MockMoviesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesRepoMockRecorder
}

// MockMoviesRepoMockRecorder is the mock recorder for MockMoviesRepo.
type MockMoviesRepoMockRecorder struct {
	mock *MockMoviesRepo
}

// NewMockMoviesRepo creates a new mock instance.
func NewMockMoviesRepo(ctrl *gomock.Controller) *MockMoviesRepo {
	mock := &MockMoviesRepo{ctrl: ctrl}
	mock.recorder = &MockMoviesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoviesRepo) EXPECT() *MockMoviesRepoMockRecorder {
	return m.recorder
}

// Autocomplete mocks base method.
func (m *MockMoviesRepo) Autocomplete(ctx context.Context, query string) ([]entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Autocomplete", ctx, query)
	ret0, _ := ret[0].([]entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Autocomplete indicates an expected call of Autocomplete.
func (mr *MockMoviesRepoMockRecorder) Autocomplete(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Autocomplete", reflect.TypeOf((*MockMoviesRepo)(nil).Autocomplete), ctx, query)
}

// Index mocks base method.
func (m *MockMoviesRepo) Index(ctx context.Context, data []entity.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockMoviesRepoMockRecorder) Index(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockMoviesRepo)(nil).Index), ctx, data)
}

// Search mocks base method.
func (m *MockMoviesRepo) Search(ctx context.Context, query string) ([]entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMoviesRepoMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMoviesRepo)(nil).Search), ctx, query)
}
